const repl = require('repl');

const r = repl.start({
  ignoreUndefined: true
});

r.context.rxjs = require('rxjs');

// operators
r.context.ajax = r.context.rxjs.ajax;
r.context.concat = r.context.rxjs.concat;
r.context.connectable = r.context.rxjs.connectable;
r.context.defer = r.context.rxjs.defer;
r.context.empty = r.context.rxjs.empty;
r.context.forkJoin = r.context.rxjs.forkJoin;
r.context.from = r.context.rxjs.from;
r.context.fromEvent = r.context.rxjs.fromEvent;
r.context.fromEventPattern = r.context.rxjs.fromEventPattern;
r.context.generate = r.context.rxjs.generate;
r.context.iif = r.context.rxjs.iif;
r.context.interval = r.context.rxjs.interval;
r.context.merge = r.context.rxjs.merge;
r.context.never = r.context.rxjs.never;
r.context.of = r.context.rxjs.of;
r.context.onErrorResumeNext = r.context.rxjs.onErrorResumeNext;
r.context.pairs = r.context.rxjs.pairs;
r.context.partition = r.context.rxjs.partition;
r.context.race = r.context.rxjs.race;
r.context.range = r.context.rxjs.range;
r.context.throwError = r.context.rxjs.throwError;
r.context.timer = r.context.rxjs.timer;
r.context.using = r.context.rxjs.using;
r.context.zip = r.context.rxjs.zip;
r.context.scheduled = r.context.rxjs.scheduled;
r.context.EMPTY = r.context.rxjs.EMPTY;
r.context.NEVER = r.context.rxjs.NEVER;
r.context.audit = r.context.rxjs.audit;
r.context.auditTime = r.context.rxjs.auditTime;
r.context.buffer = r.context.rxjs.buffer;
r.context.bufferCount = r.context.rxjs.bufferCount;
r.context.bufferTime = r.context.rxjs.bufferTime;
r.context.bufferToggle = r.context.rxjs.bufferToggle;
r.context.bufferWhen = r.context.rxjs.bufferWhen;
r.context.catchError = r.context.rxjs.catchError;
r.context.combineAll = r.context.rxjs.combineAll;
r.context.combineLatest = r.context.rxjs.combineLatest;
r.context.combineLatestAll = r.context.rxjs.combineLatestAll;
r.context.combineLatestWith = r.context.rxjs.combineLatestWith;
r.context.concatAll = r.context.rxjs.concatAll;
r.context.concatMap = r.context.rxjs.concatMap;
r.context.concatMapTo = r.context.rxjs.concatMapTo;
r.context.concatWith = r.context.rxjs.concatWith;
r.context.connect = r.context.rxjs.connect;
r.context.count = r.context.rxjs.count;
r.context.debounce = r.context.rxjs.debounce;
r.context.debounceTime = r.context.rxjs.debounceTime;
r.context.defaultIfEmpty = r.context.rxjs.defaultIfEmpty;
r.context.delay = r.context.rxjs.delay;
r.context.delayWhen = r.context.rxjs.delayWhen;
r.context.dematerialize = r.context.rxjs.dematerialize;
r.context.distinct = r.context.rxjs.distinct;
r.context.distinctUntilChanged = r.context.rxjs.distinctUntilChanged;
r.context.distinctUntilKeyChanged = r.context.rxjs.distinctUntilKeyChanged;
r.context.elementAt = r.context.rxjs.elementAt;
r.context.endWith = r.context.rxjs.endWith;
r.context.every = r.context.rxjs.every;
r.context.exhaust = r.context.rxjs.exhaust;
r.context.exhaustAll = r.context.rxjs.exhaustAll;
r.context.exhaustMap = r.context.rxjs.exhaustMap;
r.context.expand = r.context.rxjs.expand;
r.context.filter = r.context.rxjs.filter;
r.context.finalize = r.context.rxjs.finalize;
r.context.find = r.context.rxjs.find;
r.context.findIndex = r.context.rxjs.findIndex;
r.context.first = r.context.rxjs.first;
r.context.groupBy = r.context.rxjs.groupBy;
r.context.ignoreElements = r.context.rxjs.ignoreElements;
r.context.isEmpty = r.context.rxjs.isEmpty;
r.context.last = r.context.rxjs.last;
r.context.map = r.context.rxjs.map;
r.context.mapTo = r.context.rxjs.mapTo;
r.context.materialize = r.context.rxjs.materialize;
r.context.max = r.context.rxjs.max;
r.context.mergeAll = r.context.rxjs.mergeAll;
r.context.flatMap = r.context.rxjs.flatMap;
r.context.mergeMap = r.context.rxjs.mergeMap;
r.context.mergeMapTo = r.context.rxjs.mergeMapTo;
r.context.mergeScan = r.context.rxjs.mergeScan;
r.context.mergeWith = r.context.rxjs.mergeWith;
r.context.min = r.context.rxjs.min;
r.context.multicast = r.context.rxjs.multicast;
r.context.observeOn = r.context.rxjs.observeOn;
r.context.pairwise = r.context.rxjs.pairwise;
r.context.pluck = r.context.rxjs.pluck;
r.context.publish = r.context.rxjs.publish;
r.context.publishBehavior = r.context.rxjs.publishBehavior;
r.context.publishLast = r.context.rxjs.publishLast;
r.context.publishReplay = r.context.rxjs.publishReplay;
r.context.raceWith = r.context.rxjs.raceWith;
r.context.reduce = r.context.rxjs.reduce;
r.context.repeat = r.context.rxjs.repeat;
r.context.repeatWhen = r.context.rxjs.repeatWhen;
r.context.retry = r.context.rxjs.retry;
r.context.retryWhen = r.context.rxjs.retryWhen;
r.context.refCount = r.context.rxjs.refCount;
r.context.sample = r.context.rxjs.sample;
r.context.sampleTime = r.context.rxjs.sampleTime;
r.context.scan = r.context.rxjs.scan;
r.context.sequenceEqual = r.context.rxjs.sequenceEqual;
r.context.share = r.context.rxjs.share;
r.context.shareReplay = r.context.rxjs.shareReplay;
r.context.single = r.context.rxjs.single;
r.context.skip = r.context.rxjs.skip;
r.context.skipLast = r.context.rxjs.skipLast;
r.context.skipUntil = r.context.rxjs.skipUntil;
r.context.skipWhile = r.context.rxjs.skipWhile;
r.context.startWith = r.context.rxjs.startWith;
r.context.subscribeOn = r.context.rxjs.subscribeOn;
r.context.switchAll = r.context.rxjs.switchAll;
r.context.switchMap = r.context.rxjs.switchMap;
r.context.switchMapTo = r.context.rxjs.switchMapTo;
r.context.switchScan = r.context.rxjs.switchScan;
r.context.take = r.context.rxjs.take;
r.context.takeLast = r.context.rxjs.takeLast;
r.context.takeUntil = r.context.rxjs.takeUntil;
r.context.takeWhile = r.context.rxjs.takeWhile;
r.context.tap = r.context.rxjs.tap;
r.context.throttle = r.context.rxjs.throttle;
r.context.throttleTime = r.context.rxjs.throttleTime;
r.context.throwIfEmpty = r.context.rxjs.throwIfEmpty;
r.context.timeInterval = r.context.rxjs.timeInterval;
r.context.timeout = r.context.rxjs.timeout;
r.context.timeoutWith = r.context.rxjs.timeoutWith;
r.context.timestamp = r.context.rxjs.timestamp;
r.context.toArray = r.context.rxjs.toArray;
r.context.window = r.context.rxjs.window;
r.context.windowCount = r.context.rxjs.windowCount;
r.context.windowTime = r.context.rxjs.windowTime;
r.context.windowToggle = r.context.rxjs.windowToggle;
r.context.windowWhen = r.context.rxjs.windowWhen;
r.context.withLatestFrom = r.context.rxjs.withLatestFrom;
r.context.zipAll = r.context.rxjs.zipAll;
r.context.zipWith = r.context.rxjs.zipWith;
